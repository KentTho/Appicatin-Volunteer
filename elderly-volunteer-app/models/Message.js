const mongoose = require("mongoose");

const messageSchema = new mongoose.Schema({
  // X√°c ƒë·ªãnh h·ªôi tho·∫°i (d√πng ObjectId thay v√¨ String)
  conversationId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Conversation",
    required: true,
  },
  // Ng∆∞·ªùi g·ª≠i
  senderId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  // Ng∆∞·ªùi nh·∫≠n (n·∫øu l√† tin nh·∫Øn ri√™ng t∆∞)
  receiverId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    default: null, // N·∫øu l√† nh√≥m th√¨ null
  },
  // Thu·ªôc v·ªÅ nh√≥m n√†o (n·∫øu l√† nh√≥m chat)
  groupId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Group",
    default: null,
  },
  // N·ªôi dung tin nh·∫Øn d·∫°ng text
  content: {
    type: String,
    default: null,
    validate: {
      validator: function (value) {
        return value !== null || (this.media && this.media.length > 0);
      },
      message: "Tin nh·∫Øn ph·∫£i c√≥ n·ªôi dung ho·∫∑c media!",
    },
  },
  // Danh s√°ch media (cho ph√©p g·ª≠i nhi·ªÅu file/media 1 l√∫c)
  media: [
    {
      url: { type: String, required: true },
      type: { type: String, enum: ["image", "video", "file"], required: true },
      size: { type: Number },
      format: { type: String },
      filename: { type: String },
    },
  ],
  // Th·ªùi gian g·ª≠i
  timestamp: { type: Date, default: Date.now },
  // Tr·∫°ng th√°i ƒë√£ ƒë·ªçc
  isRead: { type: Boolean, default: false },
  seenAt: { type: Date, default: null },
  // Tr·∫°ng th√°i ƒë√£ nh·∫≠n tin nh·∫Øn
  isDelivered: { type: Boolean, default: false },
  deliveredAt: { type: Date, default: null },
  // X√≥a m·ªÅm
  isDeleted: { type: Boolean, default: false },
  deletedAt: { type: Date, default: null },
  deletedBy: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
  // H·ªó tr·ª£ tr·∫£ l·ªùi tin nh·∫Øn
  replyTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Message",
    default: null,
  },
  // Lo·∫°i tin nh·∫Øn
  messageType: {
    type: String,
    enum: ["text", "call", "sticker", "notification"],
    default: "text",
  },
  isSystem: { type: Boolean, default: false },
  isPinned: { type: Boolean, default: false },
  important: { type: Boolean, default: false },
  // Th·∫£ c·∫£m x√∫c
  reactions: [
    {
      userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
      type: {
        type: String,
        enum: ["like", "love", "haha", "wow", "sad", "angry"],
      },
      reactedAt: { type: Date, default: Date.now },
    },
  ],
  seenBy: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
  editHistory: [
    { content: String, editedAt: { type: Date, default: Date.now } },
  ],
});

// üõ† Index t·ªëi ∆∞u hi·ªáu su·∫•t
messageSchema.index({ conversationId: 1, timestamp: -1 });
messageSchema.index({ senderId: 1, receiverId: 1, timestamp: -1 }); // üî• Th√™m index t·ªëi ∆∞u

const Message = mongoose.model("Message", messageSchema);
module.exports = Message;
