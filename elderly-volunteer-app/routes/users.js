const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const nodemailer = require("nodemailer"); // G·ª≠i email
const crypto = require("crypto"); // T·∫°o m√£ OTP
const router = express.Router();
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const { authenticate, authorizeRole } = require("../middleware/authMiddleware");
let otpStore = {}; // L∆∞u m√£ OTP t·∫°m th·ªùi

// C·∫•u h√¨nh Mailtrap
const transporter = nodemailer.createTransport({
  host: "sandbox.smtp.mailtrap.io",
  port: 2525,
  auth: {
    user: process.env.MAILTRAP_USER,
    pass: process.env.MAILTRAP_PASS,
  },
});
// C·∫•u h√¨nh Multer ƒë·ªÉ upload ·∫£nh
const storage = multer.diskStorage({
  destination: "./uploads/",
  filename: (req, file, cb) => cb(null, `${Date.now()}_${file.originalname}`),
});
const upload = multer({
  storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // Gi·ªõi h·∫°n 5MB
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const isValid = allowedTypes.test(file.mimetype);
    if (isValid) cb(null, true);
    else cb(new Error("‚ùå Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpeg, jpg, png, gif, webp)"));
  },
});
router.post(
  "/upload-avatar",
  authenticate,
  upload.single("avatar"),
  async (req, res) => {
    try {
      if (!req.file)
        return res.status(400).json({ error: "Kh√¥ng c√≥ file ƒë∆∞·ª£c t·∫£i l√™n!" });

      const user = await User.findById(req.user._id); // üî• ƒê·ªïi userId th√†nh _id
      if (!user)
        return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

      // üóëÔ∏è X√≥a avatar c≈© n·∫øu c√≥
      if (user.avatar && user.avatar.startsWith("http")) {
        const oldFilePath = path.join(
          __dirname,
          "../uploads/",
          path.basename(user.avatar)
        );
        if (fs.existsSync(oldFilePath)) fs.unlinkSync(oldFilePath);
      }

      // üÜï C·∫≠p nh·∫≠t avatar m·ªõi
      const imageUrl = `${req.protocol}://${req.get("host")}/uploads/${
        req.file.filename
      }`;
      user.avatar = imageUrl;
      await user.save();

      res.json({ message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!", avatar: user.avatar });
    } catch (err) {
      console.error("‚ùå L·ªói khi upload avatar:", err);
      res.status(500).json({ error: "L·ªói khi upload avatar!" });
    }
  }
);
// ‚ùå API X√≥a Avatar (Kh√¥ng ch·∫∑n upload l·∫°i ·∫£nh c≈©)
router.delete("/remove-avatar", authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.user._id); // üî• ƒê·ªïi userId th√†nh _id
    if (!user)
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

    // üóëÔ∏è X√≥a avatar c≈© n·∫øu t·ªìn t·∫°i
    if (user.avatar && user.avatar.startsWith("http")) {
      const filePath = path.join(
        __dirname,
        "../uploads/",
        path.basename(user.avatar)
      );
      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
    }

    // üî• S·ª≠ d·ª•ng avatar m·∫∑c ƒë·ªãnh t·ª´ server
    user.avatar = `${req.protocol}://${req.get(
      "host"
    )}/uploads/default-avatar.png`;
    await user.save();

    res.json({ message: "·∫¢nh ƒë·∫°i di·ªán ƒë√£ ƒë∆∞·ª£c x√≥a!", avatar: user.avatar });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a avatar:", err);
    res.status(500).json({ error: "L·ªói khi x√≥a avatar!" });
  }
});

// Ch·ªâ admin m·ªõi c√≥ th·ªÉ l·∫•y danh s√°ch user (c√≥ ph√¢n trang)
router.get("/", authenticate, authorizeRole("admin"), async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const users = await User.find()
      .select("_id name email role avatar")
      .skip(skip)
      .limit(limit);

    const totalUsers = await User.countDocuments();

    res.json({ totalUsers, page, limit, users });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// API c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n (M·ªü r·ªông th√™m tr∆∞·ªùng m·ªõi)
router.put("/update", authenticate, async (req, res) => {
  console.log("üîç Full req.user:", req.user);
  console.log("üîë User ID t·ª´ req.user:", req.user?._id);

  if (!req.user?._id) {
    return res
      .status(400)
      .json({ error: "User ch∆∞a x√°c th·ª±c ho·∫∑c token kh√¥ng h·ª£p l·ªá!" });
  }

  const updatedUser = await User.findByIdAndUpdate(req.user._id, req.body, {
    new: true,
  });
  if (!updatedUser) {
    return res
      .status(404)
      .json({ message: "Kh√¥ng t√¨m th·∫•y user ƒë·ªÉ c·∫≠p nh·∫≠t!" });
  }

  res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", user: updatedUser });
});

// H√†m ki·ªÉm tra m·∫≠t kh·∫©u m·∫°nh (6-20 k√Ω t·ª±, c√≥ ch·ªØ hoa, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát)
const isStrongPassword = (password) => {
  const passwordRegex =
    /^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,20}$/;
  return passwordRegex.test(password);
};
router.post("/register", async (req, res) => {
  try {
    const isValidEmail = (email) => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    };
    const { name, email, password, role, avatar } = req.body;

    // Ki·ªÉm tra ƒë·∫ßy ƒë·ªß th√¥ng tin
    if (!name || !email || !password || !role) {
      return res.status(400).json({ error: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    // Ki·ªÉm tra email h·ª£p l·ªá
    if (!isValidEmail(email)) {
      return res.status(400).json({ error: "Email kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ["elderly", "volunteer", "admin"];
    if (!validRoles.includes(role)) {
      return res.status(400).json({ error: "Role kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }

    // Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
    if (!isStrongPassword(password)) {
      return res.status(400).json({
        error:
          "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa, 1 s·ªë, 1 k√Ω t·ª± ƒë·∫∑c bi·ªát v√† t·ª´ 6-20 k√Ω t·ª±",
      });
    }

    // Hash m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
    const hashedPassword = await bcrypt.hash(password, 10);

    // N·∫øu l√† "elderly", b·ªè qua x√°c minh email
    const isVerified = role === "elderly";
    let verificationToken = null;
    let verificationLink = null;

    if (!isVerified) {
      verificationToken = crypto.randomBytes(32).toString("hex");
      verificationLink = `http://localhost:5000/users/verify/${verificationToken}`;
    }

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      role,
      avatar: avatar || "", // n·∫øu kh√¥ng c√≥ avatar th√¨ ƒë·ªÉ r·ªóng
      verificationToken,
      isVerified, // Elderly s·∫Ω ƒë∆∞·ª£c x√°c minh ngay l·∫≠p t·ª©c
    });

    // L∆∞u v√†o DB
    await newUser.save();

    // N·∫øu kh√¥ng ph·∫£i elderly, g·ª≠i email x√°c minh
    if (!isVerified) {
      await transporter.sendMail({
        from: '"H·ªá Th·ªëng" <no-reply@example.com>',
        to: email,
        subject: "X√°c minh t√†i kho·∫£n",
        html: `<p>Xin ch√†o ${name},</p>
               <p>Vui l√≤ng nh·∫•n v√†o <a href="${verificationLink}">ƒë√¢y</a> ƒë·ªÉ x√°c minh t√†i kho·∫£n c·ªßa b·∫°n.</p>
               <p>Li√™n k·∫øt n√†y c√≥ hi·ªáu l·ª±c trong 24 gi·ªù.</p>`,
      });

      return res.status(201).json({
        message:
          "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c minh t√†i kho·∫£n.",
      });
    }

    // N·∫øu l√† elderly, ph·∫£n h·ªìi ngay l·∫≠p t·ª©c
    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay.",
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "L·ªói server: " + err.message });
  }
});

//ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user || !bcrypt.compareSync(password, user.password)) {
      return res
        .status(400)
        .json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
    }

    const token = jwt.sign(
      {
        _id: user._id,
        email: user.email,
        role: user.role,
        name: user.name,
      },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      token,
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
        avatar: user.avatar,
      },
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói server: " + err.message });
  }
});
// Qu√™n m·∫≠t kh·∫©u - G·ª≠i m√£ OTP
router.post("/forgot-password", async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) return res.status(400).json({ error: "Email kh√¥ng t·ªìn t·∫°i" });

    const otp = crypto.randomInt(100000, 999999).toString(); // T·∫°o m√£ OTP 6 s·ªë
    otpStore[email] = { otp, expiresAt: Date.now() + 5 * 60 * 1000 }; // H·∫øt h·∫°n sau 5 ph√∫t

    // G·ª≠i OTP qua email
    await transporter.sendMail({
      from: '"H·ªó tr·ª£ Elderly App" <no-reply@elderly-app.com>',
      to: email,
      subject: "M√£ OTP ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`,
    });

    res.json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// X√°c nh·∫≠n OTP v√† ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
router.post("/reset-password", async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;

    // Ki·ªÉm tra ƒë·∫ßy ƒë·ªß th√¥ng tin
    if (!email || !otp || !newPassword) {
      return res.status(400).json({ error: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    // Ki·ªÉm tra email h·ª£p l·ªá
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra OTP c√≤n h·∫°n v√† kh·ªõp kh√¥ng
    const otpData = otpStore[email];
    if (!otpData || otpData.otp !== otp) {
      return res
        .status(400)
        .json({ error: "M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    if (Date.now() > otpData.expiresAt) {
      delete otpStore[email]; // X√≥a OTP ƒë√£ h·∫øt h·∫°n
      return res.status(400).json({ error: "M√£ OTP ƒë√£ h·∫øt h·∫°n" });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi c√≥ m·∫°nh kh√¥ng
    if (!isStrongPassword(newPassword)) {
      return res.status(400).json({
        error:
          "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa, 1 s·ªë, 1 k√Ω t·ª± ƒë·∫∑c bi·ªát v√† t·ª´ 6-20 k√Ω t·ª±",
      });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi cho user
    user.password = hashedPassword;
    await user.save();

    // X√≥a OTP ƒë√£ d√πng
    delete otpStore[email];

    res.json({
      message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "L·ªói server: " + err.message });
  }
});
//Thay ƒë·ªïi m·∫≠t kh·∫©u
router.put("/change-password", authenticate, async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;

    if (!oldPassword || !newPassword)
      return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });

    const isStrongPassword = (password) =>
      /^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{6,20}$/.test(
        password
      );
    if (!isStrongPassword(newPassword))
      return res.status(400).json({ error: "M·∫≠t kh·∫©u m·ªõi ch∆∞a ƒë·ªß m·∫°nh." });

    const user = await User.findById(req.user._id);
    if (!user)
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch)
      return res.status(400).json({ error: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c" });

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    await transporter.sendMail({
      from: '"Support" <support@example.com>',
      to: user.email,
      subject: "Th√¥ng b√°o ƒë·ªïi m·∫≠t kh·∫©u",
      text: "B·∫°n ƒë√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. N·∫øu kh√¥ng ph·∫£i b·∫°n, h√£y li√™n h·ªá h·ªó tr·ª£ ngay.",
    });

    res.json({
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! M·ªôt email th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i.",
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// X√°c minh t√†i kho·∫£n qua email
router.get("/verify/:token", async (req, res) => {
  try {
    const { token } = req.params;

    // Ki·ªÉm tra token
    if (!token) {
      return res.status(400).json({ error: "Token kh√¥ng h·ª£p l·ªá." });
    }

    // T√¨m user theo token
    const user = await User.findOne({ verificationToken: token });

    // Kh√¥ng t√¨m th·∫•y user
    if (!user) {
      return res
        .status(400)
        .json({ error: "Token x√°c minh kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
    }

    // Ki·ªÉm tra n·∫øu ƒë√£ x√°c minh r·ªìi
    if (user.isVerified) {
      return res.status(200).json({
        message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c minh tr∆∞·ªõc ƒë√≥. Vui l√≤ng ƒëƒÉng nh·∫≠p.",
      });
    }

    // X√°c minh t√†i kho·∫£n
    user.isVerified = true;
    user.verificationToken = undefined; // X√≥a token ƒë·ªÉ tr√°nh t√°i s·ª≠ d·ª•ng
    await user.save();

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
      message:
        "X√°c minh t√†i kho·∫£n th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.",
    });

    // Ho·∫∑c n·∫øu l√† website, c√≥ th·ªÉ redirect:
    // return res.redirect('https://your-frontend-app.com/login?verified=true');
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ error: "ƒê√£ x·∫£y ra l·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
});
//API logout (c·∫≠p nh·∫≠t isOnline, lastOnline)
router.post("/logout", authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.user._id);
    if (!user)
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    user.isOnline = false;
    user.lastOnline = new Date();
    await user.save();

    res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
//API g·ª£i √Ω volunteer theo elderly
router.get("/recommend/:elderlyId", authenticate, async (req, res) => {
  try {
    const elderly = await User.findById(req.params.elderlyId);
    if (!elderly || elderly.role !== "elderly") {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi cao tu·ªïi." });
    }

    const volunteers = await User.find({
      role: "volunteer",
      location: elderly.location,
      preferences: { $in: elderly.preferences },
      availability: true,
    }).select("name avatar skills experience rating");

    res.json({ volunteers });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
router.get("/me", authenticate, async (req, res) => {
  try {
    console.log("üìå Full req.user:", req.user);
    console.log("üìå User ID t·ª´ token:", req.user?._id); // Ch·ªânh s·ª≠a l·∫°i ·ªü ƒë√¢y ƒë·ªÉ s·ª≠ d·ª•ng _id

    if (!req.user || !req.user._id) {
      // Ki·ªÉm tra l·∫°i _id thay v√¨ userId
      console.log("‚ùå req.user kh√¥ng c√≥ _id!");
      return res.status(401).json({ error: "Kh√¥ng t√¨m th·∫•y th√¥ng tin user." });
    }

    const user = await User.findById(req.user._id).select("-password"); // S·ª≠ d·ª•ng _id thay v√¨ userId
    console.log("üîç K·∫øt qu·∫£ t√¨m user t·ª´ DB:", user);

    if (!user) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y user trong database!");
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    res.json(user);
  } catch (err) {
    console.error("L·ªói Server:", err);
    res.status(500).json({ error: "L·ªói server" });
  }
});
module.exports = router;
