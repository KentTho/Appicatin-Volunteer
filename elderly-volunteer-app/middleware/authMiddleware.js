const jwt = require("jsonwebtoken");
const User = require("../models/User");

// Middleware x√°c th·ª±c JWT
const authenticate = async (req, res, next) => {
  // Log to√†n b·ªô headers ƒë·ªÉ ki·ªÉm tra v·∫•n ƒë·ªÅ
  console.log("üîç To√†n b·ªô headers nh·∫≠n ƒë∆∞·ª£c:", req.headers);

  const authHeader = req.headers.authorization;
  console.log("üîç Header Authorization nh·∫≠n ƒë∆∞·ª£c:", authHeader); // Log authHeader

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ header Authorization
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res
      .status(401)
      .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu Bearer!" });
  }

  const token = authHeader.split(" ")[1]; // L·∫•y token sau "Bearer "
  console.log("üîç Token nh·∫≠n ƒë∆∞·ª£c:", token); // Log token

  try {
    // Gi·∫£i m√£ token v√† ki·ªÉm tra h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log("üîç Decoded token:", decoded); // Log decoded token

    // Ki·ªÉm tra n·∫øu token kh√¥ng ch·ª©a th√¥ng tin ng∆∞·ªùi d√πng
    if (!decoded._id) {
      return res
        .status(401)
        .json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng trong token!" });
    }

    // T√¨m ng∆∞·ªùi d√πng t·ª´ ID
    const user = await User.findById(decoded._id).select("-password");
    console.log("üîç Ng∆∞·ªùi d√πng t√¨m th·∫•y:", user); // Log user t√¨m ƒë∆∞·ª£c

    if (!user) {
      return res
        .status(404)
        .json({ message: `Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID ${decoded._id}` });
    }

    // Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o request
    req.user = {
      _id: user._id.toString(),
      name: user.name,
      email: user.email,
      role: user.role,
      avatar: user.avatar,
    };

    console.log("‚úÖ X√°c th·ª±c th√†nh c√¥ng! User:", req.user); // Log th√¥ng tin user
    next(); // Ti·∫øp t·ª•c x·ª≠ l√Ω y√™u c·∫ßu
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c token:", error);
    return res
      .status(401)
      .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
  }
};
// Middleware ki·ªÉm tra quy·ªÅn (role)
const authorizeRole = (...roles) => {
  return (req, res, next) => {
    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({
        message: `Quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi. Vai tr√≤ y√™u c·∫ßu: ${roles.join(
          ", "
        )}`,
      });
    }
    next(); // Ti·∫øp t·ª•c x·ª≠ l√Ω y√™u c·∫ßu n·∫øu quy·ªÅn h·ª£p l·ªá
  };
};

module.exports = { authenticate, authorizeRole };
